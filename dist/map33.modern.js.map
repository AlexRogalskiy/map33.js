{"version":3,"file":"map33.modern.js","sources":["../src/material/QuadTextureMaterial.js","../src/index.js","../src/material/quadtexture_vert.glsl.js","../src/material/quadtexture_frag.glsl.js"],"sourcesContent":["import {\n  ShaderMaterial,\n  TextureLoader,\n  UniformsLib,\n} from 'three'\nimport vertexShader from './quadtexture_vert.glsl'\nimport fragmentShader from './quadtexture_frag.glsl'\n\nconst loader = new TextureLoader()\n\nconst QuadTextureMaterial = (urls) => {\n  return Promise.all(urls.map(url => loader.loadAsync(url))).then(maps => {\n    return new ShaderMaterial({\n      uniforms: {\n        mapNW: {value: maps[0]},\n        mapSW: {value: maps[1]},\n        mapNE: {value: maps[2]},\n        mapSE: {value: maps[3]},\n        ...UniformsLib.common,\n        ...UniformsLib.lights,\n        ...UniformsLib.fog,\n      },\n      vertexShader,\n      fragmentShader,\n      defines: {\n        USE_MAP: true,\n        USE_UV: true,\n      },\n      lights: true,\n      fog: true,\n    })\n  })\n}\n\nexport default QuadTextureMaterial\n","import getPixels from 'get-pixels'\nimport {\n  PlaneBufferGeometry,\n  Mesh,\n  MeshNormalMaterial,\n  Vector3,\n} from 'three'\nimport QuadTextureMaterial from './material/QuadTextureMaterial'\n\nconst tileMaterial = new MeshNormalMaterial({wireframe: true})\nconst baseTileSize = 600.\n\nclass Utils {\n  static long2tile (lon, zoom) {\n    return (lon + 180) / 360 * Math.pow(2, zoom)\n  }\n\n  static lat2tile (lat, zoom) {\n    return (\n      (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom)\n      )\n  }\n\n  static geo2tile (geoLocation, zoom) {\n    const maxTile = Math.pow(2, zoom);\n    return {\n      x: Math.abs(Math.floor(Utils.long2tile(geoLocation[1], zoom)) % maxTile),\n      y: Math.abs(Math.floor(Utils.lat2tile(geoLocation[0], zoom)) % maxTile)\n    }\n  }\n\n  static tile2position(z, x, y, center, tileSize) {\n    const offsetAtZ = (z) => {\n      return {\n        x: center.x / Math.pow(2, 10 - z),\n        y: center.y / Math.pow(2, 10 - z),\n      };\n    };\n    const offset = offsetAtZ(z);\n    return {\n      x: (x - center.x - (offset.x % 1) + (center.x % 1)) * tileSize,\n      y: (-y + center.y + (offset.y % 1) - (center.y % 1)) * tileSize,\n      z: 0\n    }\n  }\n\n  static position2tile(z, x, y, center, tileSize) {\n    const centerPosition = Utils.tile2position(z, center.x, center.y, center, tileSize)\n    console.log(centerPosition)\n    const deltaX = Math.round((x - centerPosition.x) / tileSize)\n    const deltaY = Math.round(-(y - centerPosition.y) / tileSize)\n    return {x: deltaX + center.x, y: deltaY + center.y, z}\n  }\n}\n\nclass MapPicker {\n  constructor(camera, map, domElement) {\n    this.vec = new Vector3(); // create once and reuse\n    this.position = new Vector3(); // create once and reuse\n    this.camera = camera\n    this.map = map\n    this.domElement = domElement\n\n    this.domElement.addEventListener('mousemove', this.onMouseMove.bind(this))\n    this.domElement.addEventListener('dblclick', this.onMouseClick.bind(this))\n  }\n\n  computeWorldPosition(event) {\n    // cf. https://stackoverflow.com/a/13091694/343834\n    this.vec.set(\n      (event.clientX / window.innerWidth) * 2 - 1,\n      -(event.clientY / window.innerHeight) * 2 + 1,\n      0.5);\n\n    this.vec.unproject(this.camera);\n\n    this.vec.sub(this.camera.position).normalize();\n\n    var distance = -this.camera.position.z / this.vec.z;\n\n    this.position.copy(this.camera.position).add(this.vec.multiplyScalar(distance));\n  }\n\n  onMouseMove(event) {\n    // this.computeWorldPosition(event)\n  }\n\n  onMouseClick(event) {\n    this.computeWorldPosition(event)\n    this.map.addFromPosition(this.position.x, this.position.y)\n  }\n\n  go(lat, lon) {\n    this.map.clean()\n    this.map.geoLocation = [lat, lon]\n    this.map.init()\n  }\n}\n\nclass Tile {\n  constructor(z, x, y, size = baseTileSize) {\n    this.size = size\n    this.z = z\n    this.x = x\n    this.y = y\n    this.baseURL = \"https://s3.amazonaws.com/elevation-tiles-prod/terrarium\"\n    this.shape = null\n    this.elevation = null\n    this.seamX = false\n    this.seamY = false\n    this.mapboxToken =\n      \"pk.eyJ1IjoibWF4bXJlIiwiYSI6ImNrY2F5bHk1czBkdXUydHVuNTJoNmxkczEifQ.tzMKMH4ElqyY-xR77zRz_w\"\n  }\n\n  key() {\n    return `${this.z}/${this.x}/${this.y}`\n  }\n  keyNeighX() {\n    return `${this.z}/${this.x + 1}/${this.y}`\n  }\n  keyNeighY() {\n    return `${this.z}/${this.x}/${this.y + 1}`\n  }\n\n  url() {\n    return `${this.baseURL}/${this.z}/${this.x}/${this.y}.png`\n  }\n\n  mapUrlOSM() {\n    return `https://c.tile.openstreetmap.org/${this.z}/${this.x}/${this.y}.png`\n  }\n\n  _mapUrlMapbox(z, x, y, mapboxToken) {\n    return `https://api.mapbox.com/v4/mapbox.satellite/${z}/${x}/${y}@2x.jpg80?access_token=${mapboxToken}`\n  }\n\n  mapUrlMapbox() {\n    return this._mapUrlMapbox(this.z, this.x, this.y, this.mapboxToken)\n  }\n\n  computeElevation(pixels) {\n    this.shape = pixels.shape\n    const elevation = new Float32Array(pixels.shape[0] * pixels.shape[1])\n    for (let i = 0; i < pixels.shape[0]; i++) {\n      for (let j = 0; j < pixels.shape[1]; j++) {\n        const ij = i + pixels.shape[0] * j\n        const rgba = ij * 4\n        elevation[ij] =\n          pixels.data[rgba] * 256.0 +\n          pixels.data[rgba + 1] +\n          pixels.data[rgba + 2] / 256.0 -\n          32768.0\n      }\n    }\n    this.elevation = elevation\n  }\n\n  buildGeometry() {\n    const geometry = new PlaneBufferGeometry(\n      this.size,\n      this.size,\n      this.shape[0] / 2,\n      this.shape[1] / 2\n    )\n    const nPosition = Math.sqrt(geometry.attributes.position.count)\n    const nElevation = Math.sqrt(this.elevation.length)\n    const ratio = nElevation / (nPosition - 1)\n    let x, y\n    for (\n      // let i = nPosition;\n      let i = 0;\n      i < geometry.attributes.position.count - nPosition;\n      i++\n    ) {\n      // if (i % nPosition === 0 || i % nPosition === nPosition - 1) continue;\n      if (i % nPosition === nPosition - 1) continue\n      x = Math.floor(i / nPosition)\n      y = i % nPosition\n      geometry.attributes.position.setZ(\n        i,\n        this.elevation[\n          Math.round(Math.round(x * ratio) * nElevation + y * ratio)\n        ] * 0.045\n      )\n    }\n    geometry.computeVertexNormals()\n    this.geometry = geometry\n  }\n\n  childrens() {\n    return [\n      new Tile(this.z + 1, this.x * 2, this.y * 2),\n      new Tile(this.z + 1, this.x * 2, this.y * 2 + 1),\n      new Tile(this.z + 1, this.x * 2 + 1, this.y * 2),\n      new Tile(this.z + 1, this.x * 2 + 1, this.y * 2 + 1),\n    ]\n  }\n\n  buildMaterial() {\n    const urls = this.childrens().map(tile => tile.mapUrlMapbox())\n    return QuadTextureMaterial(urls)\n  }\n\n  buildmesh() {\n    this.buildMaterial().then((material) => {\n      this.mesh.material = material\n    })\n    this.mesh = new Mesh(this.geometry, tileMaterial)\n  }\n\n  fetch() {\n    return new Promise((resolve, reject) => {\n      getPixels(this.url(), (err, pixels) => {\n        if (err) console.error(err)\n        this.computeElevation(pixels)\n        this.buildGeometry()\n        this.buildmesh()\n        resolve(this)\n      })\n    })\n  }\n\n  setPosition(center) {\n    const position = Utils.tile2position(\n      this.z,\n      this.x,\n      this.y,\n      center,\n      this.size\n    )\n    this.mesh.position.set(...Object.values(position))\n  }\n\n  resolveSeamY(neighbor) {\n    const tPosition = this.mesh.geometry.attributes.position.count\n    const nPosition = Math.sqrt(tPosition)\n    const nPositionN = Math.sqrt(\n      neighbor.mesh.geometry.attributes.position.count\n    )\n    if (nPosition !== nPositionN) {\n      console.error(\"resolveSeamY only implemented for geometries of same size\")\n      return\n    }\n    for (let i = tPosition - nPosition; i < tPosition; i++) {\n      this.mesh.geometry.attributes.position.setZ(\n        i,\n        neighbor.mesh.geometry.attributes.position.getZ(\n          i - (tPosition - nPosition)\n        )\n      )\n    }\n  }\n\n  resolveSeamX(neighbor) {\n    const tPosition = this.mesh.geometry.attributes.position.count\n    const nPosition = Math.sqrt(tPosition)\n    const nPositionN = Math.sqrt(\n      neighbor.mesh.geometry.attributes.position.count\n    )\n    if (nPosition !== nPositionN) {\n      console.error(\"resolveSeamX only implemented for geometries of same size\")\n      return\n    }\n    for (let i = nPosition - 1; i < tPosition; i += nPosition) {\n      this.mesh.geometry.attributes.position.setZ(\n        i,\n        neighbor.mesh.geometry.attributes.position.getZ(i - nPosition + 1)\n      )\n    }\n  }\n\n  resolveSeams(cache) {\n    let worked = false\n    const neighY = cache[this.keyNeighY()]\n    const neighX = cache[this.keyNeighX()]\n    if (this.seamY === false && neighY && neighY.mesh) {\n      this.resolveSeamY(neighY)\n      this.seamY = true\n      worked = true\n    }\n    if (this.seamX === false && neighX && neighX.mesh) {\n      this.resolveSeamX(neighX)\n      this.seamX = true\n      worked = true\n    }\n    if (worked) {\n      this.mesh.geometry.attributes.position.needsUpdate = true\n      this.mesh.geometry.computeVertexNormals()\n    }\n  }\n}\n\nclass Map {\n  constructor (scene, camera, controls, geoLocation, nTiles, zoom=10, options) {\n    this.scene = scene\n    this.camera = camera\n    this.controls = controls\n    this.geoLocation = geoLocation\n    this.nTiles = nTiles\n    this.zoom = zoom\n    this.options = options\n    this.tileSize = baseTileSize\n\n    this.tileCache = {};\n\n    this.init()\n  }\n\n  init() {\n    this.center = Utils.geo2tile(this.geoLocation, this.zoom)\n    console.log({loc: this.geoLocation, center: this.center})\n    const tileOffset = Math.floor(this.nTiles / 2)\n\n    for (let i = 0; i < this.nTiles; i++) {\n      for (let j = 0; j < this.nTiles; j++) {\n        const tile = new Tile(this.zoom, this.center.x + i - tileOffset, this.center.y + j - tileOffset)\n        this.tileCache[tile.key()] = tile\n      }\n    }\n\n    const promises = Object.values(this.tileCache).map(tile =>\n      tile.fetch().then(tile => {\n        tile.setPosition(this.center)\n        this.scene.add(tile.mesh)\n        return tile\n      })\n    )\n\n    Promise.all(promises).then(tiles => {\n      tiles.reverse().forEach(tile => {  // reverse to avoid seams artifacts\n        tile.resolveSeams(this.tileCache)\n      })\n    })\n\n  }\n\n  addFromPosition(posX, posY) {\n    const {\n      x,\n      y,\n      z\n    } = Utils.position2tile(this.zoom, posX, posY, this.center, this.tileSize)\n    console.log({x, y, z})\n    const tile = new Tile(this.zoom, x, y)\n\n    if (tile.key() in this.tileCache) return\n\n    this.tileCache[tile.key()] = tile\n    tile.fetch().then(tile => {\n      tile.setPosition(this.center)\n      this.scene.add(tile.mesh)\n    }).then(() => {\n      Object.values(this.tileCache).forEach(tile => tile.resolveSeams(this.tileCache))\n    })\n  }\n\n  clean() {\n    Object.values(this.tileCache).forEach(tile => {\n      this.scene.remove(tile.mesh)\n      tile.mesh.geometry.dispose();\n      ['mapSW', 'mapNW', 'mapSE', 'mapNE'].forEach(key => tile.mesh.material.uniforms[key].value.dispose())\n      tile.mesh.material.dispose()\n    })\n    this.tileCache = {}\n  }\n}\n\nexport {Map, MapPicker}\n","export default `\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n`\n","export default `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n// ####### custom uniforms #########\nuniform sampler2D mapNW;\nuniform sampler2D mapSW;\nuniform sampler2D mapNE;\nuniform sampler2D mapSE;\n// #################################\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\n  #ifdef USE_MAP\n\n  vec4 colorSW = mix(mix(texture2D(mapSW, vUv * 2.), vec4(0.), step(0.5, vUv.x)), vec4(0.), step(0.5, vUv.y));\n  vec4 colorNW = mix(mix(texture2D(mapNW, vUv * 2. + vec2(0., -1.)), vec4(0.), step(0.5, vUv.x)), vec4(0.), 1. - step(0.5, vUv.y));\n  vec4 colorSE = mix(mix(texture2D(mapSE, vUv * 2. + vec2(-1., 0.)), vec4(0.), 1. - step(0.5, vUv.x)), vec4(0.), step(0.5, vUv.y));\n  vec4 colorNE = mix(mix(texture2D(mapNE, vUv * 2. + vec2(-1., -1.)), vec4(0.), 1. - step(0.5, vUv.x)), vec4(0.), 1. - step(0.5, vUv.y));\n\n  // texelColor = mapTexelToLinear(texelColor);\n  diffuseColor *= colorSW + colorNW + colorNE + colorSE;\n\n  #endif\n\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`\n"],"names":["loader","TextureLoader","tileMaterial","MeshNormalMaterial","wireframe","Utils","[object Object]","lon","zoom","Math","pow","lat","log","tan","PI","cos","geoLocation","maxTile","x","abs","floor","long2tile","y","lat2tile","z","center","tileSize","offset","offsetAtZ","centerPosition","tile2position","console","deltaX","round","deltaY","MapPicker","constructor","camera","map","domElement","this","vec","Vector3","position","addEventListener","onMouseMove","bind","onMouseClick","computeWorldPosition","event","set","clientX","window","innerWidth","clientY","innerHeight","unproject","sub","normalize","distance","copy","add","multiplyScalar","addFromPosition","go","clean","init","Tile","size","baseURL","shape","elevation","seamX","seamY","mapboxToken","key","keyNeighX","keyNeighY","url","mapUrlOSM","_mapUrlMapbox","mapUrlMapbox","computeElevation","pixels","Float32Array","i","j","ij","rgba","data","buildGeometry","geometry","PlaneBufferGeometry","nPosition","sqrt","attributes","count","nElevation","length","ratio","setZ","computeVertexNormals","childrens","buildMaterial","urls","tile","Promise","all","loadAsync","then","maps","ShaderMaterial","uniforms","mapNW","value","mapSW","mapNE","mapSE","UniformsLib","common","lights","fog","vertexShader","fragmentShader","defines","USE_MAP","USE_UV","buildmesh","material","mesh","Mesh","fetch","resolve","reject","getPixels","err","error","setPosition","Object","values","resolveSeamY","neighbor","tPosition","getZ","resolveSeamX","resolveSeams","cache","worked","neighY","neighX","needsUpdate","Map","scene","controls","nTiles","options","tileCache","geo2tile","loc","tileOffset","promises","tiles","reverse","forEach","posX","posY","position2tile","remove","dispose"],"mappings":"6KAQA,MAAMA,EAAS,IAAIC,ECCbC,EAAe,IAAIC,EAAmB,CAACC,WAAW,IAGxD,MAAMC,EACJC,iBAAkBC,EAAKC,GACrB,OAAQD,EAAM,KAAO,IAAME,KAAKC,IAAI,EAAGF,GAGzCF,gBAAiBK,EAAKH,GACpB,OACG,EAAIC,KAAKG,IAAIH,KAAKI,IAAIF,EAAMF,KAAKK,GAAK,KAAO,EAAIL,KAAKM,IAAIJ,EAAMF,KAAKK,GAAK,MAAQL,KAAKK,IAAM,EAAIL,KAAKC,IAAI,EAAGF,GAIlHF,gBAAiBU,EAAaR,GAC5B,MAAMS,EAAUR,KAAKC,IAAI,EAAGF,GAC5B,MAAO,CACLU,EAAGT,KAAKU,IAAIV,KAAKW,MAAMf,EAAMgB,UAAUL,EAAY,GAAIR,IAASS,GAChEK,EAAGb,KAAKU,IAAIV,KAAKW,MAAMf,EAAMkB,SAASP,EAAY,GAAIR,IAASS,IAInEX,qBAAqBkB,EAAGN,EAAGI,EAAGG,EAAQC,GACpC,MAMMC,EANaH,CAAAA,IACV,CACLN,EAAGO,EAAOP,EAAIT,KAAKC,IAAI,EAAG,GAAKc,GAC/BF,EAAGG,EAAOH,EAAIb,KAAKC,IAAI,EAAG,GAAKc,KAGpBI,CAAUJ,GACzB,MAAO,CACLN,GAAIA,EAAIO,EAAOP,EAAKS,EAAOT,EAAI,EAAMO,EAAOP,EAAI,GAAMQ,EACtDJ,IAAKA,EAAIG,EAAOH,EAAKK,EAAOL,EAAI,EAAMG,EAAOH,EAAI,GAAMI,EACvDF,EAAG,GAIPlB,qBAAqBkB,EAAGN,EAAGI,EAAGG,EAAQC,GACpC,MAAMG,EAAiBxB,EAAMyB,cAAcN,EAAGC,EAAOP,EAAGO,EAAOH,EAAGG,EAAQC,GAC1EK,QAAQnB,IAAIiB,GACZ,MAAMG,EAASvB,KAAKwB,OAAOf,EAAIW,EAAeX,GAAKQ,GAC7CQ,EAASzB,KAAKwB,QAAQX,EAAIO,EAAeP,GAAKI,GACpD,MAAO,CAACR,EAAGc,EAASP,EAAOP,EAAGI,EAAGY,EAAST,EAAOH,EAAGE,EAAAA,IAIxD,MAAMW,EACJC,YAAYC,EAAQC,EAAKC,GACvBC,KAAKC,IAAM,IAAIC,EACfF,KAAKG,SAAW,IAAID,EACpBF,KAAKH,OAASA,EACdG,KAAKF,IAAMA,EACXE,KAAKD,WAAaA,EAElBC,KAAKD,WAAWK,iBAAiB,YAAaJ,KAAKK,YAAYC,KAAKN,OACpEA,KAAKD,WAAWK,iBAAiB,WAAYJ,KAAKO,aAAaD,KAAKN,OAGtEQ,qBAAqBC,GAEnBT,KAAKC,IAAIS,IACND,EAAME,QAAUC,OAAOC,WAAc,EAAI,GACxCJ,EAAMK,QAAUF,OAAOG,YAAe,EAAI,EAC5C,IAEFf,KAAKC,IAAIe,UAAUhB,KAAKH,QAExBG,KAAKC,IAAIgB,IAAIjB,KAAKH,OAAOM,UAAUe,YAEnC,IAAIC,GAAYnB,KAAKH,OAAOM,SAASnB,EAAIgB,KAAKC,IAAIjB,EAElDgB,KAAKG,SAASiB,KAAKpB,KAAKH,OAAOM,UAAUkB,IAAIrB,KAAKC,IAAIqB,eAAeH,IAGvEd,YAAYI,IAIZF,aAAaE,GACXT,KAAKQ,qBAAqBC,GAC1BT,KAAKF,IAAIyB,gBAAgBvB,KAAKG,SAASzB,EAAGsB,KAAKG,SAASrB,GAG1D0C,GAAGrD,EAAKJ,GACNiC,KAAKF,IAAI2B,QACTzB,KAAKF,IAAItB,YAAc,CAACL,EAAKJ,GAC7BiC,KAAKF,IAAI4B,QAIb,MAAMC,EACJ/B,YAAYZ,EAAGN,EAAGI,EAAG8C,EA1FF,KA2FjB5B,KAAK4B,KAAOA,EACZ5B,KAAKhB,EAAIA,EACTgB,KAAKtB,EAAIA,EACTsB,KAAKlB,EAAIA,EACTkB,KAAK6B,QAAU,0DACf7B,KAAK8B,MAAQ,KACb9B,KAAK+B,UAAY,KACjB/B,KAAKgC,OAAQ,EACbhC,KAAKiC,OAAQ,EACbjC,KAAKkC,YACH,2FAGJC,MACE,MAAQ,GAAEnC,KAAKhB,KAAKgB,KAAKtB,KAAKsB,KAAKlB,IAErCsD,YACE,MAAQ,GAAEpC,KAAKhB,KAAKgB,KAAKtB,EAAI,KAAKsB,KAAKlB,IAEzCuD,YACE,MAAQ,GAAErC,KAAKhB,KAAKgB,KAAKtB,KAAKsB,KAAKlB,EAAI,IAGzCwD,MACE,MAAQ,GAAEtC,KAAK6B,WAAW7B,KAAKhB,KAAKgB,KAAKtB,KAAKsB,KAAKlB,QAGrDyD,YACE,MAAQ,oCAAmCvC,KAAKhB,KAAKgB,KAAKtB,KAAKsB,KAAKlB,QAGtE0D,cAAcxD,EAAGN,EAAGI,EAAGoD,GACrB,MAAQ,8CAA6ClD,KAAKN,KAAKI,2BAA2BoD,IAG5FO,eACE,YAAYD,cAAcxC,KAAKhB,EAAGgB,KAAKtB,EAAGsB,KAAKlB,EAAGkB,KAAKkC,aAGzDQ,iBAAiBC,GACf3C,KAAK8B,MAAQa,EAAOb,MACpB,MAAMC,EAAY,IAAIa,aAAaD,EAAOb,MAAM,GAAKa,EAAOb,MAAM,IAClE,IAAK,IAAIe,EAAI,EAAGA,EAAIF,EAAOb,MAAM,GAAIe,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOb,MAAM,GAAIgB,IAAK,CACxC,MAAMC,EAAKF,EAAIF,EAAOb,MAAM,GAAKgB,EAC3BE,EAAY,EAALD,EACbhB,EAAUgB,GACY,IAApBJ,EAAOM,KAAKD,GACZL,EAAOM,KAAKD,EAAO,GACnBL,EAAOM,KAAKD,EAAO,GAAK,IACxB,MAGNhD,KAAK+B,UAAYA,EAGnBmB,gBACE,MAAMC,EAAW,IAAIC,EACnBpD,KAAK4B,KACL5B,KAAK4B,KACL5B,KAAK8B,MAAM,GAAK,EAChB9B,KAAK8B,MAAM,GAAK,GAEZuB,EAAYpF,KAAKqF,KAAKH,EAASI,WAAWpD,SAASqD,OACnDC,EAAaxF,KAAKqF,KAAKtD,KAAK+B,UAAU2B,QACtCC,EAAQF,GAAcJ,EAAY,GACxC,IAAI3E,EAAGI,EACP,IAEE,IAAI+D,EAAI,EACRA,EAAIM,EAASI,WAAWpD,SAASqD,MAAQH,EACzCR,IAGIA,EAAIQ,GAAcA,EAAY,IAClC3E,EAAIT,KAAKW,MAAMiE,EAAIQ,GACnBvE,EAAI+D,EAAIQ,EACRF,EAASI,WAAWpD,SAASyD,KAC3Bf,EAGI,KAFJ7C,KAAK+B,UACH9D,KAAKwB,MAAMxB,KAAKwB,MAAMf,EAAIiF,GAASF,EAAa3E,EAAI6E,MAI1DR,EAASU,uBACT7D,KAAKmD,SAAWA,EAGlBW,YACE,MAAO,CACL,IAAInC,EAAK3B,KAAKhB,EAAI,EAAY,EAATgB,KAAKtB,EAAgB,EAATsB,KAAKlB,GACtC,IAAI6C,EAAK3B,KAAKhB,EAAI,EAAY,EAATgB,KAAKtB,EAAgB,EAATsB,KAAKlB,EAAQ,GAC9C,IAAI6C,EAAK3B,KAAKhB,EAAI,EAAY,EAATgB,KAAKtB,EAAQ,EAAY,EAATsB,KAAKlB,GAC1C,IAAI6C,EAAK3B,KAAKhB,EAAI,EAAY,EAATgB,KAAKtB,EAAQ,EAAY,EAATsB,KAAKlB,EAAQ,IAItDiF,gBAEE,OD9LyBC,EC6LZhE,KAAK8D,YAAYhE,IAAImE,GAAQA,EAAKxB,gBD5L1CyB,QAAQC,IAAIH,EAAKlE,IAAIwC,GAAO9E,EAAO4G,UAAU9B,KAAO+B,KAAKC,OACnDC,EAAe,CACxBC,SAAU,CACRC,MAAO,CAACC,MAAOJ,EAAK,IACpBK,MAAO,CAACD,MAAOJ,EAAK,IACpBM,MAAO,CAACF,MAAOJ,EAAK,IACpBO,MAAO,CAACH,MAAOJ,EAAK,OACjBQ,EAAYC,UACZD,EAAYE,UACZF,EAAYG,KAEjBC,aEtBU,4vCFuBVC,eGvBU,q5FHwBVC,QAAS,CACPC,SAAS,EACTC,QAAQ,GAEVN,QAAQ,EACRC,KAAK,KAnBkBjB,IAAAA,ECiM3BuB,YACEvF,KAAK+D,gBAAgBM,KAAMmB,IACzBxF,KAAKyF,KAAKD,SAAWA,IAEvBxF,KAAKyF,KAAO,IAAIC,EAAK1F,KAAKmD,SAAUzF,GAGtCiI,QACE,WAAWzB,QAAQ,CAAC0B,EAASC,KAC3BC,EAAU9F,KAAKsC,MAAO,CAACyD,EAAKpD,KACtBoD,GAAKxG,QAAQyG,MAAMD,GACvB/F,KAAK0C,iBAAiBC,GACtB3C,KAAKkD,gBACLlD,KAAKuF,YACLK,EAAQ5F,UAKdiG,YAAYhH,GACV,MAAMkB,EAAWtC,EAAMyB,cACrBU,KAAKhB,EACLgB,KAAKtB,EACLsB,KAAKlB,EACLG,EACAe,KAAK4B,MAEP5B,KAAKyF,KAAKtF,SAASO,OAAOwF,OAAOC,OAAOhG,IAG1CiG,aAAaC,GACX,MAAMC,EAAYtG,KAAKyF,KAAKtC,SAASI,WAAWpD,SAASqD,MACnDH,EAAYpF,KAAKqF,KAAKgD,GAI5B,GAAIjD,IAHepF,KAAKqF,KACtB+C,EAASZ,KAAKtC,SAASI,WAAWpD,SAASqD,OAM7C,IAAK,IAAIX,EAAIyD,EAAYjD,EAAWR,EAAIyD,EAAWzD,IACjD7C,KAAKyF,KAAKtC,SAASI,WAAWpD,SAASyD,KACrCf,EACAwD,EAASZ,KAAKtC,SAASI,WAAWpD,SAASoG,KACzC1D,GAAKyD,EAAYjD,UAPrB9D,QAAQyG,MAAM,6DAalBQ,aAAaH,GACX,MAAMC,EAAYtG,KAAKyF,KAAKtC,SAASI,WAAWpD,SAASqD,MACnDH,EAAYpF,KAAKqF,KAAKgD,GAI5B,GAAIjD,IAHepF,KAAKqF,KACtB+C,EAASZ,KAAKtC,SAASI,WAAWpD,SAASqD,OAM7C,IAAK,IAAIX,EAAIQ,EAAY,EAAGR,EAAIyD,EAAWzD,GAAKQ,EAC9CrD,KAAKyF,KAAKtC,SAASI,WAAWpD,SAASyD,KACrCf,EACAwD,EAASZ,KAAKtC,SAASI,WAAWpD,SAASoG,KAAK1D,EAAIQ,EAAY,SANlE9D,QAAQyG,MAAM,6DAWlBS,aAAaC,GACX,IAAIC,GAAS,EACb,MAAMC,EAASF,EAAM1G,KAAKqC,aACpBwE,EAASH,EAAM1G,KAAKoC,cACP,IAAfpC,KAAKiC,OAAmB2E,GAAUA,EAAOnB,OAC3CzF,KAAKoG,aAAaQ,GAClB5G,KAAKiC,OAAQ,EACb0E,GAAS,IAEQ,IAAf3G,KAAKgC,OAAmB6E,GAAUA,EAAOpB,OAC3CzF,KAAKwG,aAAaK,GAClB7G,KAAKgC,OAAQ,EACb2E,GAAS,GAEPA,IACF3G,KAAKyF,KAAKtC,SAASI,WAAWpD,SAAS2G,aAAc,EACrD9G,KAAKyF,KAAKtC,SAASU,yBAKzB,MAAMkD,EACJnH,YAAaoH,EAAOnH,EAAQoH,EAAUzI,EAAa0I,EAAQlJ,EAAK,GAAImJ,GAClEnH,KAAKgH,MAAQA,EACbhH,KAAKH,OAASA,EACdG,KAAKiH,SAAWA,EAChBjH,KAAKxB,YAAcA,EACnBwB,KAAKkH,OAASA,EACdlH,KAAKhC,KAAOA,EACZgC,KAAKmH,QAAUA,EACfnH,KAAKd,SAnSY,IAqSjBc,KAAKoH,UAAY,GAEjBpH,KAAK0B,OAGPA,OACE1B,KAAKf,OAASpB,EAAMwJ,SAASrH,KAAKxB,YAAawB,KAAKhC,MACpDuB,QAAQnB,IAAI,CAACkJ,IAAKtH,KAAKxB,YAAaS,OAAQe,KAAKf,SACjD,MAAMsI,EAAatJ,KAAKW,MAAMoB,KAAKkH,OAAS,GAE5C,IAAK,IAAIrE,EAAI,EAAGA,EAAI7C,KAAKkH,OAAQrE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAI9C,KAAKkH,OAAQpE,IAAK,CACpC,MAAMmB,EAAO,IAAItC,EAAK3B,KAAKhC,KAAMgC,KAAKf,OAAOP,EAAImE,EAAI0E,EAAYvH,KAAKf,OAAOH,EAAIgE,EAAIyE,GACrFvH,KAAKoH,UAAUnD,EAAK9B,OAAS8B,EAIjC,MAAMuD,EAAWtB,OAAOC,OAAOnG,KAAKoH,WAAWtH,IAAImE,GACjDA,EAAK0B,QAAQtB,KAAKJ,IAChBA,EAAKgC,YAAYjG,KAAKf,QACtBe,KAAKgH,MAAM3F,IAAI4C,EAAKwB,MACbxB,KAIXC,QAAQC,IAAIqD,GAAUnD,KAAKoD,IACzBA,EAAMC,UAAUC,QAAQ1D,IACtBA,EAAKwC,aAAazG,KAAKoH,eAM7B7F,gBAAgBqG,EAAMC,GACpB,MAAMnJ,EACJA,EADII,EAEJA,EAFIE,EAGJA,GACEnB,EAAMiK,cAAc9H,KAAKhC,KAAM4J,EAAMC,EAAM7H,KAAKf,OAAQe,KAAKd,UACjEK,QAAQnB,IAAI,CAACM,EAAAA,EAAGI,EAAAA,EAAGE,EAAAA,IACnB,MAAMiF,EAAO,IAAItC,EAAK3B,KAAKhC,KAAMU,EAAGI,GAEhCmF,EAAK9B,aAAciF,YAEvBpH,KAAKoH,UAAUnD,EAAK9B,OAAS8B,EAC7BA,EAAK0B,QAAQtB,KAAKJ,IAChBA,EAAKgC,YAAYjG,KAAKf,QACtBe,KAAKgH,MAAM3F,IAAI4C,EAAKwB,QACnBpB,KAAK,KACN6B,OAAOC,OAAOnG,KAAKoH,WAAWO,QAAQ1D,GAAQA,EAAKwC,aAAazG,KAAKoH,eAIzE3F,QACEyE,OAAOC,OAAOnG,KAAKoH,WAAWO,QAAQ1D,IACpCjE,KAAKgH,MAAMe,OAAO9D,EAAKwB,MACvBxB,EAAKwB,KAAKtC,SAAS6E,UACnB,CAAC,QAAS,QAAS,QAAS,SAASL,QAAQxF,GAAO8B,EAAKwB,KAAKD,SAAShB,SAASrC,GAAKuC,MAAMsD,WAC3F/D,EAAKwB,KAAKD,SAASwC,YAErBhI,KAAKoH,UAAY"}