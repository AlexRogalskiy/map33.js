import e from"get-pixels";import{TextureLoader as t,ShaderMaterial as n,UniformsLib as i,MeshNormalMaterial as s,Vector3 as o,PlaneBufferGeometry as r,Mesh as a}from"three";function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}var c=new t,h=new s({wireframe:!0}),m=function(){function e(){}return e.long2tile=function(e,t){return(e+180)/360*Math.pow(2,t)},e.lat2tile=function(e,t){return(1-Math.log(Math.tan(e*Math.PI/180)+1/Math.cos(e*Math.PI/180))/Math.PI)/2*Math.pow(2,t)},e.geo2tile=function(t,n){var i=Math.pow(2,n);return{x:Math.abs(Math.floor(e.long2tile(t[1],n))%i),y:Math.abs(Math.floor(e.lat2tile(t[0],n))%i)}},e.tile2position=function(e,t,n,i,s){var o=function(e){return{x:i.x/Math.pow(2,10-e),y:i.y/Math.pow(2,10-e)}}(e);return{x:(t-i.x-o.x%1+i.x%1)*s,y:(-n+i.y+o.y%1-i.y%1)*s,z:0}},e.position2tile=function(t,n,i,s,o){var r=e.tile2position(t,s.x,s.y,s,o);console.log(r);var a=Math.round((n-r.x)/o),l=Math.round(-(i-r.y)/o);return{x:a+s.x,y:l+s.y,z:t}},e}(),u=function(){function e(e,t,n,i){this.vec=new o,this.position=new o,this.camera=e,this.map=t,this.domElement=n,this.controls=i,this.domElement.addEventListener("mousemove",this.onMouseMove.bind(this)),this.domElement.addEventListener("dblclick",this.onMouseClick.bind(this))}var t=e.prototype;return t.computeWorldPosition=function(e){this.vec.set(e.clientX/window.innerWidth*2-1,-e.clientY/window.innerHeight*2+1,.5),this.vec.unproject(this.camera),this.vec.sub(this.camera.position).normalize();var t=-this.camera.position.z/this.vec.z;this.position.copy(this.camera.position).add(this.vec.multiplyScalar(t))},t.onMouseMove=function(e){},t.onMouseClick=function(e){this.computeWorldPosition(e),this.map.addFromPosition(this.position.x,this.position.y)},t.go=function(e,t){this.map.clean(),this.map.geoLocation=[e,t],this.map.init()},e}(),p=function(){function e(e,t,n){if(this.supportedApis={osm:this.mapUrlOSM.bind(this),mapbox:this.mapUrlMapbox.bind(this),eox:this.mapUrlSentinel2Cloudless.bind(this),maptiler:this.mapUrlmapTiler.bind(this)},!(e in this.supportedApis))throw new Error("Unknown source api");this.api=e,this.token=t,this.options=n}var t=e.prototype;return t.mapUrlOSM=function(e,t,n){return"https://c.tile.openstreetmap.org/"+e+"/"+t+"/"+n+".png"},t.mapUrlMapbox=function(e,t,n){return"https://api.mapbox.com/v4/mapbox.satellite/"+e+"/"+t+"/"+n+"@2x.jpg80?access_token="+this.token},t.mapUrlSentinel2Cloudless=function(e,t,n){return"https://tiles.maps.eox.at/wmts?layer=s2cloudless_3857&style=default&tilematrixset=g&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image%2Fjpeg&TileMatrix="+e+"&TileCol="+t+"&TileRow="+n},t.mapUrlmapTiler=function(e,t,n){return"https://api.maptiler.com/tiles/satellite/"+e+"/"+t+"/"+n+".jpg?key="+this.token},t.mapUrl=function(e,t,n){return this.supportedApis[this.api](e,t,n)},e}(),f=function(){function t(e,t,n,i,s){void 0===s&&(s=600),this.map=e,this.z=t,this.x=n,this.y=i,this.size=s,this.baseURL="https://s3.amazonaws.com/elevation-tiles-prod/terrarium",this.shape=null,this.elevation=null,this.seamX=!1,this.seamY=!1}var s=t.prototype;return s.key=function(){return this.z+"/"+this.x+"/"+this.y},s.keyNeighX=function(){return this.z+"/"+(this.x+1)+"/"+this.y},s.keyNeighY=function(){return this.z+"/"+this.x+"/"+(this.y+1)},s.url=function(){return this.baseURL+"/"+this.z+"/"+this.x+"/"+this.y+".png"},s.mapUrl=function(){return this.map.source.mapUrl(this.z,this.x,this.y)},s.computeElevation=function(e){this.shape=e.shape;for(var t=new Float32Array(e.shape[0]*e.shape[1]),n=0;n<e.shape[0];n++)for(var i=0;i<e.shape[1];i++){var s=n+e.shape[0]*i,o=4*s;t[s]=256*e.data[o]+e.data[o+1]+e.data[o+2]/256-32768}this.elevation=t},s.buildGeometry=function(){for(var e,t,n=new r(this.size,this.size,this.shape[0]/2,this.shape[1]/2),i=Math.sqrt(n.attributes.position.count),s=Math.sqrt(this.elevation.length),o=s/(i-1),a=0;a<n.attributes.position.count-i;a++)a%i!=i-1&&(e=Math.floor(a/i),t=a%i,n.attributes.position.setZ(a,.045*this.elevation[Math.round(Math.round(e*o)*s+t*o)]));n.computeVertexNormals(),this.geometry=n},s.childrens=function(){return[new t(this.map,this.z+1,2*this.x,2*this.y),new t(this.map,this.z+1,2*this.x,2*this.y+1),new t(this.map,this.z+1,2*this.x+1,2*this.y),new t(this.map,this.z+1,2*this.x+1,2*this.y+1)]},s.buildMaterial=function(){return e=this.childrens().map(function(e){return e.mapUrl()}),Promise.all(e.map(function(e){return c.loadAsync(e)})).then(function(e){return new n({uniforms:l({mapNW:{value:e[0]},mapSW:{value:e[1]},mapNE:{value:e[2]},mapSE:{value:e[3]}},i.common,i.lights,i.fog),vertexShader:"\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",fragmentShader:"\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n// ####### custom uniforms #########\nuniform sampler2D mapNW;\nuniform sampler2D mapSW;\nuniform sampler2D mapNE;\nuniform sampler2D mapSE;\n// #################################\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\n  #ifdef USE_MAP\n\n  vec4 colorSW = mix(mix(texture2D(mapSW, vUv * 2.), vec4(0.), step(0.5, vUv.x)), vec4(0.), step(0.5, vUv.y));\n  vec4 colorNW = mix(mix(texture2D(mapNW, vUv * 2. + vec2(0., -1.)), vec4(0.), step(0.5, vUv.x)), vec4(0.), 1. - step(0.5, vUv.y));\n  vec4 colorSE = mix(mix(texture2D(mapSE, vUv * 2. + vec2(-1., 0.)), vec4(0.), 1. - step(0.5, vUv.x)), vec4(0.), step(0.5, vUv.y));\n  vec4 colorNE = mix(mix(texture2D(mapNE, vUv * 2. + vec2(-1., -1.)), vec4(0.), 1. - step(0.5, vUv.x)), vec4(0.), 1. - step(0.5, vUv.y));\n\n  // texelColor = mapTexelToLinear(texelColor);\n  diffuseColor *= colorSW + colorNW + colorNE + colorSE;\n\n  #endif\n\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",defines:{USE_MAP:!0,USE_UV:!0},lights:!0,fog:!0})});var e},s.buildmesh=function(){var e=this;this.buildMaterial().then(function(t){e.mesh.material=t}),this.mesh=new a(this.geometry,h)},s.fetch=function(){var t=this;return new Promise(function(n,i){e(t.url(),function(e,i){e&&console.error(e),t.computeElevation(i),t.buildGeometry(),t.buildmesh(),n(t)})})},s.setPosition=function(e){var t,n=m.tile2position(this.z,this.x,this.y,e,this.size);(t=this.mesh.position).set.apply(t,Object.values(n))},s.resolveSeamY=function(e){var t=this.mesh.geometry.attributes.position.count,n=Math.sqrt(t);if(n===Math.sqrt(e.mesh.geometry.attributes.position.count))for(var i=t-n;i<t;i++)this.mesh.geometry.attributes.position.setZ(i,e.mesh.geometry.attributes.position.getZ(i-(t-n)));else console.error("resolveSeamY only implemented for geometries of same size")},s.resolveSeamX=function(e){var t=this.mesh.geometry.attributes.position.count,n=Math.sqrt(t);if(n===Math.sqrt(e.mesh.geometry.attributes.position.count))for(var i=n-1;i<t;i+=n)this.mesh.geometry.attributes.position.setZ(i,e.mesh.geometry.attributes.position.getZ(i-n+1));else console.error("resolveSeamX only implemented for geometries of same size")},s.resolveSeams=function(e){var t=!1,n=e[this.keyNeighY()],i=e[this.keyNeighX()];!1===this.seamY&&n&&n.mesh&&(this.resolveSeamY(n),this.seamY=!0,t=!0),!1===this.seamX&&i&&i.mesh&&(this.resolveSeamX(i),this.seamX=!0,t=!0),t&&(this.mesh.geometry.attributes.position.needsUpdate=!0,this.mesh.geometry.computeVertexNormals())},t}(),d=function(){function e(e,t,n,i,s,o,r){void 0===o&&(o=10),this.scene=e,this.camera=t,this.source=n,this.geoLocation=i,this.nTiles=s,this.zoom=o,this.options=r,this.tileSize=600,this.tileCache={},this.init()}var t=e.prototype;return t.init=function(){var e=this;this.center=m.geo2tile(this.geoLocation,this.zoom),console.log({loc:this.geoLocation,center:this.center});for(var t=Math.floor(this.nTiles/2),n=0;n<this.nTiles;n++)for(var i=0;i<this.nTiles;i++){var s=new f(this,this.zoom,this.center.x+n-t,this.center.y+i-t);this.tileCache[s.key()]=s}var o=Object.values(this.tileCache).map(function(t){return t.fetch().then(function(t){return t.setPosition(e.center),e.scene.add(t.mesh),t})});Promise.all(o).then(function(t){t.reverse().forEach(function(t){t.resolveSeams(e.tileCache)})})},t.addFromPosition=function(e,t){var n=this,i=m.position2tile(this.zoom,e,t,this.center,this.tileSize),s=i.x,o=i.y;console.log({x:s,y:o,z:i.z});var r=new f(this,this.zoom,s,o);r.key()in this.tileCache||(this.tileCache[r.key()]=r,r.fetch().then(function(e){e.setPosition(n.center),n.scene.add(e.mesh)}).then(function(){Object.values(n.tileCache).forEach(function(e){return e.resolveSeams(n.tileCache)})}))},t.clean=function(){var e=this;Object.values(this.tileCache).forEach(function(t){e.scene.remove(t.mesh),t.mesh.geometry.dispose(),["mapSW","mapNW","mapSE","mapNE"].forEach(function(e){return t.mesh.material.uniforms[e].value.dispose()}),t.mesh.material.dispose()}),this.tileCache={}},e}();export{d as Map,u as MapPicker,p as Source};
//# sourceMappingURL=map33.module.js.map
